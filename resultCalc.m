function result=resultCalc(para,feature,sig)
% Calculate the performance of all TFs (individual, gerenal, general_cv,
% adaptive, adaptive_cv) using unnormalized signals or normalized signals.

featureNames=para.result.features;
TFs=fields(feature.interp.est);
for tfIdx=1:length(TFs)
    currentTF=TFs{tfIdx};
    steps={'align','calibrate'};
    for stepIdx=1:length(steps)
        currentstep=steps{stepIdx};
        for featureIdx=1:length(featureNames)
            if strcmp(featureNames{featureIdx},'RMSE')
               for subjIdx=1:para.Nsubj
                    
                result.linear.(currentTF).(currentstep){subjIdx}.('RMSE')=...
                    sqrt(mean((sig.est.(currentTF).(currentstep){subjIdx}(50:end)-sig.align{subjIdx}.aorta(50:end)).^2));                    
                result.linear.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
                    mean(result.linear.(currentTF).(currentstep){subjIdx}.('RMSE'));
                
                result.nolinear_1.(currentTF).(currentstep){subjIdx}.('RMSE')=...
                    sqrt(mean((sig.est_nolinear_1.(currentTF).(currentstep){subjIdx}-sig.align{subjIdx}.aorta).^2));                    
                result.nolinear_1.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
                    mean(result.nolinear_1.(currentTF).(currentstep){subjIdx}.('RMSE'));
                
                result.nolinear_2.(currentTF).(currentstep){subjIdx}.('RMSE')=...
                    sqrt(mean((sig.est_nolinear_2.(currentTF).(currentstep){subjIdx}-sig.align{subjIdx}.aorta).^2));                    
                result.nolinear_2.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
                    mean(result.nolinear_2.(currentTF).(currentstep){subjIdx}.('RMSE'));
                
                result.nolinear_3.(currentTF).(currentstep){subjIdx}.('RMSE')=...
                    sqrt(mean((sig.est_nolinear_3.(currentTF).(currentstep){subjIdx}-sig.align{subjIdx}.aorta).^2));                    
                result.nolinear_3.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
                    mean(result.nolinear_3.(currentTF).(currentstep){subjIdx}.('RMSE'));  
                
%                 result.nolinear_4.(currentTF).(currentstep){subjIdx}.('RMSE')=...
%                     sqrt(mean((sig.est_nolinear_4.(currentTF).(currentstep){subjIdx}-sig.align{subjIdx}.aorta).^2));                    
%                 result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
%                     mean(result.nolinear_4.(currentTF).(currentstep){subjIdx}.('RMSE')); 
                
                end
                result.linear.groupaverage.(currentTF).(currentstep).('RMSE')(1,:)=...
                    [mean(result.linear.subjAverage.(currentTF).(currentstep).('RMSE')),...
                    std(result.linear.subjAverage.(currentTF).(currentstep).('RMSE'))];
                result.nolinear_1.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_1.subjAverage.(currentTF).(currentstep).('RMSE')),...
                    std(result.nolinear_1.subjAverage.(currentTF).(currentstep).('RMSE'))];
                result.nolinear_2.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_2.subjAverage.(currentTF).(currentstep).('RMSE')),...
                    std(result.nolinear_2.subjAverage.(currentTF).(currentstep).('RMSE'))];
                result.nolinear_3.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_3.subjAverage.(currentTF).(currentstep).('RMSE')),...
                    std(result.nolinear_3.subjAverage.(currentTF).(currentstep).('RMSE'))];
%                 result.nolinear_4.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
%                      [mean(result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE')),...
%                     std(result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE'))]; 
            elseif strcmp(featureNames{featureIdx},'R')
               for subjIdx=1:para.Nsubj
                    
                result.linear.(currentTF).(currentstep){subjIdx}.('R')=min(corrcoef(sig.est.(currentTF).(currentstep){subjIdx},sig.align{subjIdx}.aorta)).^2;                  
                result.linear.subjAverage.(currentTF).(currentstep).('R')(subjIdx,1)=...
                    mean(result.linear.(currentTF).(currentstep){subjIdx}.('R'));
                
                result.nolinear_1.(currentTF).(currentstep){subjIdx}.('R')=min(corrcoef(sig.est_nolinear_1.(currentTF).(currentstep){subjIdx},sig.align{subjIdx}.aorta));
                result.nolinear_1.subjAverage.(currentTF).(currentstep).('R')(subjIdx,1)=...
                    mean(result.nolinear_1.(currentTF).(currentstep){subjIdx}.('R'));
                
                result.nolinear_2.(currentTF).(currentstep){subjIdx}.('R')=min(corrcoef(sig.est_nolinear_2.(currentTF).(currentstep){subjIdx},sig.align{subjIdx}.aorta));                   
                result.nolinear_2.subjAverage.(currentTF).(currentstep).('R')(subjIdx,1)=...
                    mean(result.nolinear_2.(currentTF).(currentstep){subjIdx}.('R'));
                
                result.nolinear_3.(currentTF).(currentstep){subjIdx}.('R')=min(corrcoef(sig.est_nolinear_3.(currentTF).(currentstep){subjIdx},sig.align{subjIdx}.aorta));                  
                result.nolinear_3.subjAverage.(currentTF).(currentstep).('R')(subjIdx,1)=...
                    mean(result.nolinear_3.(currentTF).(currentstep){subjIdx}.('R'));  
                
%                 result.nolinear_4.(currentTF).(currentstep){subjIdx}.('RMSE')=...
%                     sqrt(mean((sig.est_nolinear_4.(currentTF).(currentstep){subjIdx}-sig.align{subjIdx}.aorta).^2));                    
%                 result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE')(subjIdx,1)=...
%                     mean(result.nolinear_4.(currentTF).(currentstep){subjIdx}.('RMSE')); 
                
                end
                result.linear.groupaverage.(currentTF).(currentstep).('R')(1,:)=...
                    [mean(result.linear.subjAverage.(currentTF).(currentstep).('R')),...
                    std(result.linear.subjAverage.(currentTF).(currentstep).('R'))];
                result.nolinear_1.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_1.subjAverage.(currentTF).(currentstep).('R')),...
                    std(result.nolinear_1.subjAverage.(currentTF).(currentstep).('R'))];
                result.nolinear_2.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_2.subjAverage.(currentTF).(currentstep).('R')),...
                    std(result.nolinear_2.subjAverage.(currentTF).(currentstep).('R'))];
                result.nolinear_3.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                     [mean(result.nolinear_3.subjAverage.(currentTF).(currentstep).('R')),...
                    std(result.nolinear_3.subjAverage.(currentTF).(currentstep).('R'))];
%                 result.nolinear_4.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
%                      [mean(result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE')),...
%                     std(result.nolinear_4.subjAverage.(currentTF).(currentstep).('RMSE'))]; 
            else
            for subjIdx=1:para.Nsubj               
 
                result.linear.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})=...
                    abs(feature.interp.est.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})-...
                    feature.interp.align{subjIdx}.aorta.(featureNames{featureIdx}));
                result.linear.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})(subjIdx,1)=...
                    mean(result.linear.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx}));
                
                result.nolinear_1.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})=...
                    feature.interp.est_nolinear_1.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})-...
                    feature.interp.align{subjIdx}.aorta.(featureNames{featureIdx});
                result.nolinear_1.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})(subjIdx,1)=...
                    mean(result.nolinear_1.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx}));
                
                result.nolinear_2.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})=...
                    feature.interp.est_nolinear_2.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})-...
                    feature.interp.align{subjIdx}.aorta.(featureNames{featureIdx});
                result.nolinear_2.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})(subjIdx,1)=...
                    mean(result.nolinear_2.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx}));
                
                result.nolinear_3.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})=...
                    feature.interp.est_nolinear_3.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})-...
                    feature.interp.align{subjIdx}.aorta.(featureNames{featureIdx});
                result.nolinear_3.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})(subjIdx,1)=...
                    mean(result.nolinear_3.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx}));
                
%                 result.nolinear_4.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})=...
%                     feature.interp.est_nolinear_4.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx})-...
%                     feature.interp.align{subjIdx}.aorta.(featureNames{featureIdx});
%                 result.nolinear_4.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})(subjIdx,1)=...
%                     mean(result.nolinear_4.(currentTF).(currentstep){subjIdx}.(featureNames{featureIdx}));
            end
            result.linear.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                    [mean(result.linear.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})),...
                    std(result.linear.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx}))];
            result.nolinear_1.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                    [mean(result.nolinear_1.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})),...
                    std(result.nolinear_1.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx}))];
            result.nolinear_2.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                    [mean(result.nolinear_2.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})),...
                    std(result.nolinear_2.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx}))];
            result.nolinear_3.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
                    [mean(result.nolinear_3.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})),...
                    std(result.nolinear_3.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx}))];
%             result.nolinear_4.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:)=...
%                     [mean(result.nolinear_4.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx})),...
%                     std(result.nolinear_4.subjAverage.(currentTF).(currentstep).(featureNames{featureIdx}))];
                
            end
                
                
        end
    end
end


% output table
col.TF={};
col.normalize={};
for featureIdx=1:length(featureNames)
    statistics_linear{featureIdx}=[];
    statistics_nolinear_1{featureIdx}=[];
    statistics_nolinear_2{featureIdx}=[];
    statistics_nolinear_3{featureIdx}=[];
%     statistics_nolinear_4{featureIdx}=[];
end
for tfIdx=1:length(TFs)
    currentTF=TFs{tfIdx};
    steps={'align','calibrate'};
    for stepIdx=1:length(steps)
        currentstep=steps{stepIdx};
        col.TF=[col.TF;currentTF];
        if strcmp(currentstep,'align')
            col.normalize=[col.normalize;'No'];
        else
            col.normalize=[col.normalize;'Yes'];
        end
        for featureIdx=1:length(featureNames)
            if featureIdx==2
            statistics_linear{featureIdx}=[statistics_linear{featureIdx};...
                round(result.linear.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),4)];
            statistics_nolinear_1{featureIdx}=[statistics_nolinear_1{featureIdx};...
                round(result.nolinear_1.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),4)];
            statistics_nolinear_2{featureIdx}=[statistics_nolinear_2{featureIdx};...
                round(result.nolinear_2.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),4)];
            statistics_nolinear_3{featureIdx}=[statistics_nolinear_3{featureIdx};...
                round(result.nolinear_3.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),4)];
%             statistics_nolinear_4{featureIdx}=[statistics_nolinear_4{featureIdx};...
%                 round(result.nolinear_4.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),4)];
                
            else
            statistics_linear{featureIdx}=[statistics_linear{featureIdx};...
                round(result.linear.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),2)];
            statistics_nolinear_1{featureIdx}=[statistics_nolinear_1{featureIdx};...
                round(result.nolinear_1.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),2)];
            statistics_nolinear_2{featureIdx}=[statistics_nolinear_2{featureIdx};...
                round(result.nolinear_2.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),2)];
            statistics_nolinear_3{featureIdx}=[statistics_nolinear_3{featureIdx};...
                round(result.nolinear_3.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),2)];
%             statistics_nolinear_4{featureIdx}=[statistics_nolinear_4{featureIdx};...
%                 round(result.nolinear_4.groupaverage.(currentTF).(currentstep).(featureNames{featureIdx})(1,:),2)];
            end
        end
    end
end
result.linear.table=table(col.TF,col.normalize,statistics_linear{:});
result.linear.table.Properties.VariableNames=['TF','Normalize',featureNames];
result.nolinear_1.table=table(col.TF,col.normalize,statistics_nolinear_1{:});
result.nolinear_1.table.Properties.VariableNames=['TF','Normalize',featureNames];
result.nolinear_2.table=table(col.TF,col.normalize,statistics_nolinear_2{:});
result.nolinear_2.table.Properties.VariableNames=['TF','Normalize',featureNames];
result.nolinear_3.table=table(col.TF,col.normalize,statistics_nolinear_3{:});
result.nolinear_3.table.Properties.VariableNames=['TF','Normalize',featureNames];
% result.nolinear_4.table=table(col.TF,col.normalize,statistics_nolinear_4{:});
% result.nolinear_4.table.Properties.VariableNames=['TF','Normalize',featureNames];

